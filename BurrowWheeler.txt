//The compiler that I have worked on is 
// http://www.tutorialspoint.com/compile_cpp_online.php
//Please run it here using any inputs- apple,banana,nishtha.


#include <iostream>
#include <cstring>
#include <algorithm>
using namespace std;

struct suffix
{
    int index; // To store original index
    int rank[2]; // To store ranks and next rank pair
};
char enc_array[100][100];
char sorted_array[100][2];
char enc_string[100];
int key;

//create my encrypted array by selecting the last column of the encrypted matrix
 void create_enc_array(char *txt, int arr[], int n){
 for (int i=0;i<n;i++){
    enc_array[i][0]= txt[arr[i]];
    for (int j=arr[i]+1,k=1;k<n;j++,k++){
     enc_array[i][k]=txt[j];
     if(txt[j] == NULL){
      j=0;
      enc_array[i][k]=txt[j];
     }
    }
}
 }


int find_arr_pos(char *arr,char c){
     for(int i=0;i<100;i++){
         if(arr[i]==c)
         return i;
     }
     return 0;
 }

 void decrypt(int n){
     //this function will take the encrypted text and sort it alphabetically so that we find the position of each character to get original string
     char enc_string_temp[100];
     char decrypt_text[100];
     char hold;
     char hold1;
     strcpy(enc_string_temp, enc_string);
     //sorting of encrypted array alphabetically
     for(int i=0; i<n; i++)
        {
        for(int j=0; j<n; j++)
        {
        if(sorted_array[j][0]>sorted_array[j+1][0])
        {
        // need to sort based on first column and keep second column which is position as it is
        hold=sorted_array[j][0];
        hold1= sorted_array[j][1];
        sorted_array[j][0]=sorted_array[j+1][0];
        sorted_array[j][1]=sorted_array[j+1][1];
        sorted_array[j+1][0]=hold;
        sorted_array[j+1][1]=hold1;
        }
        }
        }
     int temp1;
     //find position related to $ to find first character position
     key = find_arr_pos(enc_string, '$');
    decrypt_text[0]=sorted_array[((int)key)+1][0];
    temp1=sorted_array[((int)key)+1][1]-48+1;
   //till last character which is $
    for(int i=1;i<n-1;i++){
     if (temp1==0) temp1=n;
    decrypt_text[i]= sorted_array[temp1][0];
    //this will find my next character location
    temp1= sorted_array[temp1][1]-48+1;
    }
    //Display decrypted text

    cout<<endl<<"Decrypted Text is: ";
    for (int i=0;i<n;i++){
       cout<< decrypt_text[i];
 }
 }


//to display encrypted string
void display_enc(int n){
    cout<<"Encrypted txt is: ";
    for (int i=0; i<n;i++){
        enc_string[i]= enc_array[i][n-1];
        sorted_array[i][0]= enc_array[i][n-1];
        sorted_array[i][1]= 48+i;
        if(enc_array[i][n-1]=='$') continue;//to not show $ in my output encrypted string
        cout<<enc_array[i][n-1];
    }
    cout<<endl;
}

int cmp(struct suffix a, struct suffix b)
{
    return (a.rank[0] == b.rank[0])? (a.rank[1] < b.rank[1] ?1: 0):
               (a.rank[0] < b.rank[0] ?1: 0);
}

// This is the main function that takes a string 'txt' of size n as an
// argument, builds and return the suffix array for the given string
int *buildSuffixArray(char *txt, int n)
{
    // A structure to store suffixes and their indexes
    struct suffix suffixes[n];

    // Store suffixes and their indexes in an array of structures.
    // The structure is needed to sort the suffixes alphabatically
    // and maintain their old indexes while sorting
    for (int i = 0; i < n; i++)
    {
        suffixes[i].index = i;
        suffixes[i].rank[0] = txt[i] - 'a';
        suffixes[i].rank[1] = ((i+1) < n)? (txt[i + 1] - 'a'): -1;
    }

    // Sort the suffixes using the comparison function
    // defined above.
    sort(suffixes, suffixes+n, cmp);

    // At his point, all suffixes are sorted according to first
    // 2 characters.  Let us sort suffixes according to first 4
    // characters, then first 8 and so on
    int ind[n];  // This array is needed to get the index in suffixes[]
                 // from original index.  This mapping is needed to get
                 // next suffix.
    for (int k = 4; k < 2*n; k = k*2)
    {
        // Assigning rank and index values to first suffix
        int rank = 0;
        int prev_rank = suffixes[0].rank[0];
        suffixes[0].rank[0] = rank;
        ind[suffixes[0].index] = 0;

        // Assigning rank to suffixes
        for (int i = 1; i < n; i++)
        {
            // If first rank and next ranks are same as that of previous
            // suffix in array, assign the same new rank to this suffix
            if (suffixes[i].rank[0] == prev_rank &&
                    suffixes[i].rank[1] == suffixes[i-1].rank[1])
            {
                prev_rank = suffixes[i].rank[0];
                suffixes[i].rank[0] = rank;
            }
            else // Otherwise increment rank and assign
            {
                prev_rank = suffixes[i].rank[0];
                suffixes[i].rank[0] = ++rank;
            }
            ind[suffixes[i].index] = i;
        }

        // Assign next rank to every suffix
        for (int i = 0; i < n; i++)
        {
            int nextindex = suffixes[i].index + k/2;
            suffixes[i].rank[1] = (nextindex < n)?
                                  suffixes[ind[nextindex]].rank[0]: -1;
        }

        // Sort the suffixes according to first k characters
        sort(suffixes, suffixes+n, cmp);
    }

    // Store indexes of all sorted suffixes in the suffix array
    int *suffixArr = new int[n];
    for (int i = 0; i < n; i++)
        suffixArr[i] = suffixes[i].index;

    // Return the suffix array
    return  suffixArr;
}

// A utility function to print an array of given size
void printArr(int arr[], int n)
{
    for (int i = 0; i < n; i++)
        cout << arr[i] << " ";
    cout << endl;
}

int main()
{
    string originalText="";        //enter-banana,apple,nishtha
    char txt[100];
    cout<<"Enter a String"<<endl;
    cin>>originalText;
    strcpy(txt,originalText.c_str());
    //append $ at end
    int n = strlen(txt);
    txt[n]='$';
    n=n+1;
    int *suffixArr = buildSuffixArray(txt,  n);
    create_enc_array(txt,suffixArr,n);
    display_enc(n);
    decrypt(n);
    return 0;
}
